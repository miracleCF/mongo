# -*- mode: python -*-

Import("env")

env = env.Clone()

env.SConscript( [
	"base/SConscript",
	"strings/SConscript",
	"util/coding/SConscript",
	"util/math/SConscript",
        ], exports={ 'env' : env })

env.Append(CCFLAGS=['-DDEBUG_MODE=false'])

# Clang warns about struct/class tag mismatch, but as long as this is
# not a problem on Windows, these mismatches can be ignored
# http://stackoverflow.com/questions/4866425/mixing-class-and-struct. W
# warning so it doesn't become an error.
if env.ToolchainIs('clang'):
    env.Append(CCFLAGS=['-Wno-mismatched-tags'])

env.Library( "s2",
    [ 
	"s1angle.cc",
	"s2.cc",
	"s2cellid.cc",
	"s2latlng.cc",
	"s1interval.cc",
	"s2cap.cc",
	"s2cell.cc",
	"s2cellunion.cc",
	"s2edgeindex.cc",
	"s2edgeutil.cc",
	"s2latlngrect.cc",
	"s2loop.cc",
	"s2pointregion.cc",
	"s2polygon.cc",
	"s2polygonbuilder.cc",
	"s2polyline.cc",
	"s2r2rect.cc",
	"s2region.cc",
	"s2regioncoverer.cc",
	"s2regionintersection.cc",
	"s2regionunion.cc",
	"AbstractNode.cpp",
    "AbstractSTRtree.cpp",
    "Assertgeos.cpp",
    "Bintree.cpp",
    "BintreeInterval.cpp",
    "BintreeKey.cpp",
    "BintreeNode.cpp",
    "BintreeNodeBase.cpp",
    "BintreeRoot.cpp",
    "BoundaryNodeRule.cpp",
    "CGAlgorithms.cpp",
    "ConnectedElementLocationFilter.cpp",
    "ConnectedElementPointFilter.cpp",
    "ConnectedInteriorTester.cpp",
    "ConsistentAreaTester.cpp",
    "ConvexHull.cpp",
    "Coordinate.cpp",
    "CoordinateArraySequence.cpp",
    "CoordinateArraySequenceFactory.cpp",
    "CoordinateSequence.cpp",
    "CoordinateSequenceFactory.cpp",
    "Depth.cpp",
    "Dimension.cpp",
    "DirectedEdge.cpp",
    "DirectedEdgeStar.cpp",
    "DistanceOp.cpp",
    "DoubleBits.cpp",
    "Edge.cpp",
    "EdgeEnd.cpp",
    "EdgeEndBuilder.cpp",
    "EdgeEndBundle.cpp",
    "EdgeEndBundleStar.cpp",
    "EdgeEndStar.cpp",
    "EdgeIntersectionList.cpp",
    "EdgeRing.cpp",
    "Envelope.cpp",
    "GeometricShapeFactory.cpp",
    "Geometry.cpp",
    "GeometryCollection.cpp",
    "GeometryComponentFilter.cpp",
    "GeometryFactory.cpp",
    "GeometryGraph.cpp",
    "GeometryGraphOperation.cpp",
    "GeometryLocation.cpp",
    "GraphComponent.cpp",
    "HCoordinate.cpp",
    "IndexedNestedRingTester.cpp",
    "inlines.cpp",
    "Interrupt.cpp",
    "IntersectionMatrix.cpp",
    "Interval.cpp",
    "IntervalSize.cpp",
    "IsSimpleOp.cpp",
    "IsValidOp.cpp",
    "ItemBoundable.cpp",
    "Key.cpp",
    "Label.cpp",
    "LinearComponentExtracter.cpp",
    "LinearRing.cpp",
    "LineIntersector.cpp",
    "LineSegment.cpp",
    "LineString.cpp",
    "Location.cpp",
    "mathgeos.cpp",
    "MaximalEdgeRing.cpp",
    "MCPointInRing.cpp",
    "MinimalEdgeRing.cpp",
    "MonotoneChain.cpp",
    "MonotoneChainBuilder.cpp",
    "MonotoneChainEdge.cpp",
    "MonotoneChainIndexer.cpp",
    "MonotoneChainOverlapAction.cpp",
    "MonotoneChainSelectAction.cpp",
    "MultiLineString.cpp",
    "MultiPoint.cpp",
    "MultiPolygon.cpp",
    "Node.cpp",
    "NodeBase.cpp",
    "NodeFactory.cpp",
    "NodeMap.cpp",
    "NotRepresentableException.cpp",
    "OverlayNodeFactory.cpp",
    "PlanarGraph.cpp",
    "Point.cpp",
    "PointExtracter.cpp",
    "PointLocator.cpp",
    "PointOnGeometryLocator.cpp",
    "Polygon.cpp",
    "PolygonExtracter.cpp",
    "Position.cpp",
    "PrecisionModel.cpp",
    "Quadrant.cpp",
    "Quadtree.cpp",
    "QuadtreeNode.cpp",
    "RayCrossingCounter.cpp",
    "RectangleContains.cpp",
    "RectangleIntersects.cpp",
    "RelateComputer.cpp",
    "RelateNode.cpp",
    "RelateNodeFactory.cpp",
    "RelateNodeGraph.cpp",
    "RelateOp.cpp",
    "RobustDeterminant.cpp",
    "Root.cpp",
    "SegmentIntersectionTester.cpp",
    "SegmentIntersector.cpp",
    "ShortCircuitedGeometryVisitor.cpp",
    "SimpleMCSweepLineIntersector.cpp",
    "SimplePointInAreaLocator.cpp",
    "SIRtree.cpp",
    "STRtree.cpp",
    "SweepLineEvent.cpp",
    "TopologyLocation.cpp",
    "TopologyValidationError.cpp",
    ], LIBDEPS=['$BUILD_DIR/third_party/s2/base/base',
		'$BUILD_DIR/third_party/s2/strings/strings',
		'$BUILD_DIR/third_party/s2/util/coding/coding',
		'$BUILD_DIR/third_party/s2/util/math/math'])

#env.Program('r1interval_test', ['r1interval_test.cc'],
#            LIBDEPS=['s2', '$BUILD_DIR/third_party/gtest/gtest_with_main'])
#env.Program('s1angle_test', ['s1angle_test.cc'],
#            LIBDEPS=['s2', '$BUILD_DIR/third_party/gtest/gtest_with_main'])
#env.Program('s1interval_test', ['s1interval_test.cc'],
#            LIBDEPS=['s2', '$BUILD_DIR/third_party/gtest/gtest_with_main'])
#env.Program('s2regioncoverer_test', ['s2regioncoverer_test.cc'],
#            LIBDEPS=['s2', '$BUILD_DIR/third_party/gtest/gtest_with_main'])
#env.Program('s2_test', ['s2_test.cc'],
#            LIBDEPS=['s2', '$BUILD_DIR/third_party/gtest/gtest_with_main'])
